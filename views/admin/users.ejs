<%- include('../partials/admin-header', {title: 'User Management'}) %>

<div class="container-fluid">
  <div class="row">
    <!-- Sidebar -->
    <nav class="col-md-3 col-lg-2 d-md-block bg-light sidebar">
      <div class="position-sticky pt-3">
        <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted">
          <span>Admin Panel</span>
        </h6>
        <ul class="nav flex-column">
          <li class="nav-item">
            <a class="nav-link" href="/admin/dashboard">
              <i class="bi bi-speedometer2 me-2"></i>
              Dashboard
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="/admin/users">
              <i class="bi bi-people me-2"></i>
              User Management
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/admin/posts">
              <i class="bi bi-chat-dots me-2"></i>
              Post Moderation
            </a>
          </li>
        </ul>
      </div>
    </nav>

    <!-- Main content -->
    <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
      <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">User Management</h1>
      </div>

      <!-- Users Table -->
      <div class="card">
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-striped table-hover">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Username</th>
                  <th>Email</th>
                  <th>Role</th>
                  <th>Verified</th>
                  <th>Joined</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% if (users && users.length > 0) { %>
                  <% users.forEach(user => { %>
                    <tr>
                      <td><%= user.user_id %></td>
                      <td><%= user.username %></td>
                      <td><%= user.email %></td>
                      <td>
                        <select class="form-select form-select-sm role-select" 
                                data-user-id="<%= user.user_id %>" 
                                style="width: 120px;">
                          <option value="regular" <%= user.role === 'regular' ? 'selected' : '' %>>Regular</option>
                          <option value="admin" <%= user.role === 'admin' ? 'selected' : '' %>>Admin</option>
                        </select>
                      </td>
                      <td>
                        <span class="badge bg-<%= user.is_verified ? 'success' : 'warning' %>">
                          <%= user.is_verified ? 'Yes' : 'No' %>
                        </span>
                      </td>
                      <td><%= new Date(user.created_at).toLocaleDateString() %></td>
                      <td>
                        <button class="btn btn-sm btn-danger delete-user-btn" 
                                data-user-id="<%= user.user_id %>"
                                data-username="<%= user.username %>">
                          <i class="bi bi-trash"></i> Delete
                        </button>
                      </td>
                    </tr>
                  <% }); %>
                <% } else { %>
                  <tr>
                    <td colspan="7" class="text-center text-muted py-4">No users found</td>
                  </tr>
                <% } %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </main>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Role update functionality
  document.querySelectorAll('.role-select').forEach(select => {
    select.addEventListener('change', async function() {
      const userId = this.dataset.userId;
      const newRole = this.value;
      
      try {
        const response = await fetch(`/admin/users/${userId}/role`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ role: newRole })
        });
        
        const result = await response.json();
        
        if (result.success) {
          showToast('Role updated successfully!', 'success');
        } else {
          showToast('Error updating role: ' + result.error, 'error');
          // Revert the selection
          this.value = this.value === 'admin' ? 'regular' : 'admin';
        }
      } catch (error) {
        console.error('Error:', error);
        showToast('Error updating role', 'error');
        // Revert the selection
        this.value = this.value === 'admin' ? 'regular' : 'admin';
      }
    });
  });

  // User deletion functionality
  document.querySelectorAll('.delete-user-btn').forEach(button => {
    button.addEventListener('click', function() {
      const userId = this.dataset.userId;
      const username = this.dataset.username;
      
      if (confirm(`Are you sure you want to delete user "${username}"? This action cannot be undone.`)) {
        deleteUser(userId);
      }
    });
  });

  async function deleteUser(userId) {
    try {
      const response = await fetch(`/admin/users/${userId}/delete`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      const result = await response.json();
      
      if (result.success) {
        showToast('User deleted successfully!', 'success');
        // Remove the row from the table
        document.querySelector(`button[data-user-id="${userId}"]`).closest('tr').remove();
      } else {
        showToast('Error deleting user: ' + result.error, 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      showToast('Error deleting user', 'error');
    }
  }

  function showToast(message, type = 'info') {
    // Create toast notification
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
    toast.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">${message}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    `;
    
    document.body.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast);
    bsToast.show();
    
    // Remove toast after it hides
    toast.addEventListener('hidden.bs.toast', () => {
      toast.remove();
    });
  }
});
</script>

<%- include('../partials/admin-footer') %>