<%- include('partials/header', {title: 'Notifications'}) %>

<div class="container mt-4">
  <div class="row justify-content-center">
    <div class="col-lg-8">
      <div class="card card-custom">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h2 class="h5 mb-0">
            <i class="bi bi-bell me-2"></i>Notifications
          </h2>
          <div>
            <button class="btn btn-sm btn-outline-primary" id="markAllReadBtn">
              <i class="bi bi-check-all me-1"></i>Mark All Read
            </button>
          </div>
        </div>
        <div class="card-body p-0">
          <div id="notificationsContainer">
            <div class="text-center py-5">
              <div class="spinner-border" role="status"></div>
              <p class="mt-2 text-muted">Loading notifications...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
class NotificationsPage {
  constructor() {
    this.init();
  }

  async init() {
    await this.loadNotifications();
    this.setupEventListeners();
  }

  async loadNotifications() {
    try {
      const response = await fetch('/notifications');
      const notifications = await response.json();
      
      this.renderNotifications(notifications);
    } catch (error) {
      console.error('Error loading notifications:', error);
      this.showError('Failed to load notifications');
    }
  }

  renderNotifications(notifications) {
    const container = document.getElementById('notificationsContainer');
    
    if (notifications.length === 0) {
      container.innerHTML = `
        <div class="text-center py-5">
          <i class="bi bi-bell-slash text-muted" style="font-size: 3rem;"></i>
          <h5 class="mt-3 text-muted">No notifications yet</h5>
          <p class="text-muted">You'll see notifications here when tasks are due.</p>
        </div>
      `;
      return;
    }

    container.innerHTML = notifications.map(notification => `
      <div class="border-bottom p-4 ${notification.is_read ? '' : 'bg-light'}">
        <div class="d-flex align-items-start">
          <div class="flex-grow-1">
            <div class="d-flex align-items-center mb-2">
              <h6 class="mb-0 ${notification.is_read ? '' : 'fw-bold'}">${notification.title}</h6>
              ${!notification.is_read ? `
                <span class="badge bg-primary ms-2">New</span>
              ` : ''}
            </div>
            <p class="mb-2">${notification.message}</p>
            <small class="text-muted">
              <i class="bi bi-clock me-1"></i>
              ${new Date(notification.created_at).toLocaleString()}
            </small>
          </div>
          <div class="flex-shrink-0 ms-3">
            <div class="btn-group btn-group-sm">
              ${!notification.is_read ? `
                <button class="btn btn-outline-primary mark-read-btn" 
                        data-id="${notification.notification_id}">
                  <i class="bi bi-check"></i>
                </button>
              ` : ''}
              <button class="btn btn-outline-danger delete-btn" 
                      data-id="${notification.notification_id}">
                <i class="bi bi-trash"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
    `).join('');

    this.setupNotificationEvents();
  }

  setupEventListeners() {
    document.getElementById('markAllReadBtn')?.addEventListener('click', () => {
      this.markAllAsRead();
    });
  }

  setupNotificationEvents() {
    // Mark as read buttons
    document.querySelectorAll('.mark-read-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        this.markAsRead(btn.dataset.id);
      });
    });

    // Delete buttons
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        this.deleteNotification(btn.dataset.id);
      });
    });
  }

  async markAsRead(notificationId) {
    try {
      await fetch(`/notifications/${notificationId}/read`, {
        method: 'PUT'
      });
      
      await this.loadNotifications(); // Reload
    } catch (error) {
      console.error('Error marking notification as read:', error);
      this.showError('Failed to mark notification as read');
    }
  }

  async markAllAsRead() {
    try {
      await fetch('/notifications/read-all', {
        method: 'PUT'
      });
      
      await this.loadNotifications(); // Reload
    } catch (error) {
      console.error('Error marking all as read:', error);
      this.showError('Failed to mark all as read');
    }
  }

  async deleteNotification(notificationId) {
    if (!confirm('Are you sure you want to delete this notification?')) {
      return;
    }

    try {
      await fetch(`/notifications/${notificationId}`, {
        method: 'DELETE'
      });
      
      await this.loadNotifications(); // Reload
    } catch (error) {
      console.error('Error deleting notification:', error);
      this.showError('Failed to delete notification');
    }
  }

  showError(message) {
    const container = document.getElementById('notificationsContainer');
    container.innerHTML = `
      <div class="alert alert-danger m-3">
        <i class="bi bi-exclamation-triangle me-2"></i>
        ${message}
      </div>
    `;
  }
}

// Initialize when page loads
document.addEventListener('DOMContentLoaded', () => {
  new NotificationsPage();
});
</script>

<%- include('partials/footer') %>