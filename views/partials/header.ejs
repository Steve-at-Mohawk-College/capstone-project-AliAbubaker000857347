<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title><%= title || 'Pet Care Management' %></title>

  <!-- Bootstrap -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
  <!-- Custom CSS -->
  <link rel="stylesheet" href="/css/theme.css">
  

    
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
   <link href="/css/dashboard.css" rel="stylesheet">
   
  <style>
    
/* Single Notification View */
.notification-item {
  min-height: 120px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.notification-content {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.notification-header {
  background: rgba(255, 255, 255, 0.05);
}

.prev-notification-btn:disabled,
.next-notification-btn:disabled {
  opacity: 0.3;
  cursor: not-allowed;
}

/* Make dropdown slightly taller for single notification */
.notification-dropdown {
  max-height: 280px !important;
  min-height: 200px;
}

.notification-item:last-child {
  border-bottom: none !important;
}

.notification-item h6 {
  font-size: 0.9rem !important;
  margin-bottom: 0.25rem !important;
}

.notification-item p {
  font-size: 0.8rem !important;
  margin-bottom: 0.5rem !important;
  line-height: 1.3 !important;
}

.notification-item small {
  font-size: 0.75rem !important;
}

/* Compact header */
.notification-header {
  padding: 0.75rem 1rem !important;
  font-size: 0.9rem !important;
}

/* Smaller badges in notifications */
.notification-badge {
  font-size: 0.2rem !important;
  padding: 0.25rem 0.5rem !important;
}

/* View all link */
.notification-view-all {
  padding: 0.5rem 0.25rem !important;
  font-size: 0.8rem !important;
}

/* Ensure dropdown stays above content */
.dropdown-menu {
  z-index: 1000 !important;
}

/* Fix display property for notification bell */
.notification-bell-header {
  display: flex !important;
  align-items: center;
  justify-content: center;
}

.notification-bell-header:hover {
  background: rgb(221, 0, 0);
  border-color: var(--primary);
  color: rgb(40, 241, 0);
  transform: scale(1.1);
}

/* Dark mode styles for header notification */
[data-theme="dark"] .notification-bell-header {
  background: green;
  border: 2px solid red;
  color: white;
}

[data-theme="dark"] .notification-bell-header:hover {
  background: rgb(221, 0, 0);
  border-color: var(--primary);
  color: rgb(40, 241, 0);
}
    /* Header text colors for dark mode */
    [data-theme="dark"] .navbar-modern {
      background: rgba(33, 37, 41, 0.95);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    [data-theme="dark"] .nav-link-modern {
      color: #ffffff !important;
    }

    [data-theme="dark"] .nav-link-modern:hover,
    [data-theme="dark"] .nav-link-modern:focus {
      color: var(--primary) !important;
      background-color: rgba(67, 97, 238, 0.15);
    }

    [data-theme="dark"] .nav-link-modern.active {
      color: var(--primary) !important;
    }

    [data-theme="dark"] .username-modern {
      color: #ffffff !important;
    }

    [data-theme="dark"] .navbar-brand-modern {
      color: var(--primary) !important;
    }

    [data-theme="dark"] .dropdown-item-modern {
      color: #e9ecef !important;
    }

    [data-theme="dark"] .dropdown-item-modern:hover,
    [data-theme="dark"] .dropdown-item-modern:focus {
      color: var(--primary) !important;
    }
        /* Dark Mode Styles */
    body.dark-mode {
      background-color: #1a1a1a;
      color: #e9ecef;
    }

    body.dark-mode .navbar-modern {
      background: rgba(33, 37, 41, 0.95);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    body.dark-mode .nav-link-modern {
      color: #e9ecef !important;
    }

    body.dark-mode .nav-link-modern:hover,
    body.dark-mode .nav-link-modern:focus {
      color: var(--primary) !important;
      background-color: rgba(67, 97, 238, 0.15);
    }

    body.dark-mode .nav-link-modern.active {
      color: var(--primary) !important;
    }

    body.dark-mode .dropdown-menu-modern {
      background: #2d3748;
      border: 1px solid #4a5568;
    }

    body.dark-mode .dropdown-item-modern {
      color: #e9ecef;
    }

    body.dark-mode .dropdown-item-modern:hover,
    body.dark-mode .dropdown-item-modern:focus {
      background: rgba(67, 97, 238, 0.2);
      color: var(--primary);
    }

    body.dark-mode .btn-outline-modern {
      color: var(--primary);
      border: 2px solid var(--primary);
    }

    body.dark-mode .btn-outline-modern:hover {
      background-color: var(--primary);
      color: white;
    }

    body.dark-mode .theme-toggle-modern {
      background: #4a5568;
      border: 1px solid #6c757d;
      color: #e9ecef;
    }

    body.dark-mode .theme-toggle-modern:hover {
      background: #6c757d;
      color: white;
    }

    body.dark-mode .profile-modern:hover {
      background: rgba(67, 97, 238, 0.15);
    }

    body.dark-mode .username-modern {
      color: #e9ecef;
    }

    body.dark-mode .user-avatar-modern {
      border: 2px solid #4a5568;
    }

    body.dark-mode .navbar-toggler-modern {
      background: #4a5568;
    }

    body.dark-mode .navbar-toggler-icon-modern {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28233, 236, 239, 0.75%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
    }
    :root {
      --primary: #4361ee;
      --primary-dark: #3a56d4;
      --secondary: #06d6a0;
      --accent: #ff6b6b;
      --light: #f8f9fa;
      --dark: #212529;
      --gray: #6c757d;
      --light-gray: #e9ecef;
      --border-radius: 12px;
      --shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      --transition: all 0.3s ease;
    }

    body {
      font-family: 'Inter', sans-serif;
      background-color: #f9f9fb;
     
    }

    /* Modern Header Styling */
    .navbar-modern {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      padding: 1rem 0;
      box-shadow: var(--shadow);
      border-bottom: 1px solid rgba(0, 0, 0, 0.05);
      position: relative;
    }

    .navbar-modern::before {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 2px;
      background: linear-gradient(90deg, var(--primary), var(--secondary));
      opacity: 0.7;
    }

    .navbar-brand-modern {
      font-family: 'Poppins', sans-serif;
      font-weight: 700;
      font-size: 1.6rem;
      color: var(--primary) !important;
      display: flex;
      align-items: center;
      transition: var(--transition);
      position: relative;
    }

    .navbar-brand-modern:hover {
      color: var(--primary-dark) !important;
      transform: translateY(-1px);
    }

    .navbar-brand-modern i {
      font-size: 1.8rem;
      margin-right: 0.5rem;
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .nav-item-modern {
      margin: 0 0.2rem;
    }

    .nav-link-modern {
      font-weight: 500;
      color: var(--dark) !important;
      transition: var(--transition);
      border-radius: var(--border-radius);
      padding: 0.6rem 1rem !important;
      position: relative;
      display: flex;
      align-items: center;
    }

    .nav-link-modern:hover,
    .nav-link-modern:focus {
      color: var(--primary) !important;
      background-color: rgba(67, 97, 238, 0.05);
    }

    .nav-link-modern.active {
      color: var(--primary) !important;
      font-weight: 600;
    }

    .nav-link-modern.active::after {
      content: '';
      position: absolute;
      bottom: -8px;
      left: 50%;
      transform: translateX(-50%);
      width: 5px;
      height: 5px;
      border-radius: 50%;
      background-color: var(--primary);
    }

    /* Dropdown Menu */
    .dropdown-modern {
      position: relative;
    }

    .dropdown-menu-modern {
      border: none;
      border-radius: var(--border-radius);
      padding: 0.8rem;
      box-shadow: var(--shadow);
      border: 1px solid var(--light-gray);
      margin-top: 0.5rem;
      animation: fadeIn 0.2s ease;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-5px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .dropdown-item-modern {
      border-radius: 8px;
      padding: 0.7rem 1rem;
      color: var(--dark);
      font-weight: 500;
      transition: var(--transition);
      display: flex;
      align-items: center;
    }

    .dropdown-item-modern:hover,
    .dropdown-item-modern:focus {
      background: rgba(67, 97, 238, 0.08);
      color: var(--primary);
      outline: none;
    }

    /* Buttons */
    .btn-modern {
      font-weight: 600;
      border-radius: var(--border-radius);
      padding: 0.6rem 1.4rem;
      font-size: 0.9rem;
      transition: var(--transition);
      border: none;
    }

    .btn-outline-modern {
      color: var(--primary);
      border: 2px solid var(--primary);
      background: transparent;
    }

    .btn-outline-modern:hover {
      background-color: var(--primary);
      color: white;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(67, 97, 238, 0.2);
    }

    .btn-filled-modern {
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: white;
    }

    .btn-filled-modern:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 15px rgba(67, 97, 238, 0.3);
    }

    /* Theme Toggle */
    .theme-toggle-modern {
      width: 42px;
      height: 42px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--light);
      border: 1px solid var(--light-gray);
      color: var(--gray);
      transition: var(--transition);
    }

    .theme-toggle-modern:hover {
      background: var(--light-gray);
      color: var(--dark);
      transform: rotate(15deg);
    }

    /* Profile Section */
    .profile-modern {
      display: flex;
      align-items: center;
      cursor: pointer;
      padding: 0.4rem 0.8rem;
      border-radius: var(--border-radius);
      transition: var(--transition);
    }

    .profile-modern:hover {
      background: rgba(67, 97, 238, 0.05);
    }

    .username-modern {
      font-weight: 600;
      color: var(--dark);
      margin-right: 0.5rem;
    }

    .user-avatar-modern {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid var(--light-gray);
      transition: var(--transition);
    }

    .profile-modern:hover .user-avatar-modern {
      border-color: var(--primary);
    }

    /* Mobile Toggle */
    .navbar-toggler-modern {
      border: none;
      padding: 0.4rem 0.6rem;
      border-radius: var(--border-radius);
      background: var(--light);
      transition: var(--transition);
    }

    .navbar-toggler-modern:focus {
      box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.25);
    }

    .navbar-toggler-icon-modern {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%2833, 37, 41, 0.75%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
    }

    /* Responsive Adjustments */
    @media (max-width: 991.98px) {
      .navbar-nav .nav-link-modern {
        text-align: left;
        padding: 0.8rem 1rem !important;
        margin: 0.1rem 0;
      }
      
      .dropdown-menu-modern {
        border: none;
        box-shadow: none;
        padding-left: 1.5rem;
        margin-top: 0;
      }
      
      .profile-modern {
        justify-content: flex-start;
        padding: 0.8rem 1rem;
      }
    }

    /* Accessibility */
    a:focus, button:focus {
      outline: 2px solid var(--primary) !important;
      outline-offset: 2px;
    }
  </style>
</head>
<body>
  <!-- Modern Navbar -->
  <nav class="navbar navbar-expand-lg navbar-modern" role="navigation" aria-label="Main navigation">
    <div class="container">
      <!-- Brand -->
      <a class="navbar-brand navbar-brand-modern" href="/landing" aria-label="Pet Care Home">
        <i class="bi bi-heart-pulse-fill"></i> PetCare
      </a>

      <!-- Mobile Toggle -->
      <button class="navbar-toggler navbar-toggler-modern" type="button" data-bs-toggle="collapse" data-bs-target="#navbarMain" 
              aria-controls="navbarMain" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon navbar-toggler-icon-modern"></span>
      </button>

      <!-- Navbar Content -->
      <div class="collapse navbar-collapse" id="navbarMain">
        <!-- Left Nav -->
        <ul class="navbar-nav me-auto">
          <% if (typeof username !== 'undefined') { %>
            <!-- Dashboard -->
            <li class="nav-item nav-item-modern">
              <a class="nav-link nav-link-modern <%= title === 'Dashboard' ? 'active' : '' %>" href="/dashboard">
                <i class="bi bi-speedometer2 me-2"></i> Dashboard
              </a>
            </li>

            <!-- Quick Actions -->
            <li class="nav-item dropdown nav-item-modern dropdown-modern">
              <a class="nav-link nav-link-modern dropdown-toggle" href="#" id="quickActions" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-lightning me-2"></i> Quick Actions
              </a>
              <ul class="dropdown-menu dropdown-menu-modern" aria-labelledby="quickActions">
                <li><a class="dropdown-item dropdown-item-modern" href="/pets/add"><i class="bi bi-heart me-2" style="color: var(--secondary);"></i>Add Pet</a></li>
                <li><a class="dropdown-item dropdown-item-modern" href="/schedule-task"><i class="bi bi-calendar-plus me-2" style="color: var(--primary);"></i>Add Task</a></li>
              </ul>
            </li>

            <!-- Community -->
            <li class="nav-item nav-item-modern">
              <a class="nav-link nav-link-modern <%= title === 'Community' ? 'active' : '' %>" href="/community">
                <i class="bi bi-people me-2"></i> Community
              </a>
            </li>

            <!-- Health -->
            <li class="nav-item nav-item-modern">
              <a class="nav-link nav-link-modern <%= title === 'Health Tracker' ? 'active' : '' %>" href="/health-tracker-history">
                <i class="bi bi-clipboard-heart me-2"></i> Health
              </a>
            </li>
          <% } %>

          <% if (title === 'Welcome to Pet Care') { %>
            <!-- Explore Dropdown -->
            <li class="nav-item dropdown nav-item-modern dropdown-modern">
              <a class="nav-link nav-link-modern dropdown-toggle" href="#" id="exploreMenu" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-compass me-2"></i> Explore
              </a>
              <ul class="dropdown-menu dropdown-menu-modern" aria-labelledby="exploreMenu">
                <li><a class="dropdown-item dropdown-item-modern" href="#features">Features</a></li>
                <li><a class="dropdown-item dropdown-item-modern" href="#services">Services</a></li>
                <li><a class="dropdown-item dropdown-item-modern" href="#faq">FAQ</a></li>
              </ul>
            </li>
          <% } %>
        </ul>

        <!-- Right Nav -->
        <ul class="navbar-nav ms-auto align-items-center">
          <% if (typeof username !== 'undefined') { %>
            <!-- Profile Dropdown -->
            <li class="nav-item dropdown nav-item-modern dropdown-modern">
              <a class="profile-modern dropdown-toggle d-flex align-items-center" href="#" id="userMenu" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <span class="username-modern"><%= username %></span>
                <!-- Note: You would need to add the user avatar image here -->
                <!-- <img src="/path/to/avatar.jpg" class="user-avatar-modern" alt="User Avatar"> -->
                <div class="user-avatar-modern bg-primary text-white d-flex align-items-center justify-content-center">
                  <i class="bi bi-person-fill"></i>
                </div>
              </a>
              <ul class="dropdown-menu dropdown-menu-modern dropdown-menu-end" aria-labelledby="userMenu">
                <li><a class="dropdown-item dropdown-item-modern" href="/profile"><i class="bi bi-person-circle me-2"></i> Profile</a></li>
                <li><hr class="dropdown-divider"></li>
                <li>
                  <form action="/auth/logout" method="POST" class="d-inline">
                    <button type="submit" class="dropdown-item dropdown-item-modern text-danger">
                      <i class="bi bi-box-arrow-right me-2"></i> Logout
                    </button>
                  </form>
                </li>
              </ul>
            </li>

            <!-- Theme Toggle -->
            <li class="nav-item ms-2">
              <button id="themeToggle" class="btn theme-toggle-modern" title="Toggle dark/light mode" aria-label="Toggle theme">
                <i class="bi bi-sun-fill d-none" id="lightIcon"></i>
                <i class="bi bi-moon-fill" id="darkIcon"></i>
              </button>
            </li>
          <% } else { %>
            <!-- Guests -->
            <li class="nav-item me-2">
              <a class="btn btn-outline-modern btn-modern" href="/login"><i class="bi bi-box-arrow-in-right me-2"></i> Login</a>
            </li>
            <li class="nav-item">
              <a class="btn btn-filled-modern btn-modern" href="/register"><i class="bi bi-person-plus me-2"></i> Register</a>
            </li>
          <% } %>

          <!-- Notification Bell in Header -->
<li class="nav-item ms-2">
  <div class="dropdown" >
    <button class="notification-bell-header dropdown-toggle" 
            id="notificationDropdown" 
            data-bs-toggle="dropdown" 
            aria-expanded="false">
      <i class="bi bi-bell"></i>
      <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" 
            id="notificationBadge" style="display: none;">
        0
      </span>
    </button>
<!-- Update the dropdown menu in your header -->
<div class="dropdown-menu dropdown-menu-end notification-dropdown" aria-labelledby="notificationDropdown">
  <div class="dropdown-header notification-header d-flex justify-content-between align-items-center border-bottom border-dark">
    <span>Notifications</span>
    <button class="btn btn-dark btn-sm-dark" id="markAllReadBtn">
      Mark all read
    </button>
  </div>
  <div class="dropdown-divider"></div>
  <div id="notificationsList">
    <div class="px-3 py-3 text-center text-muted">
      <div class="spinner-border spinner-border-sm" role="status"></div>
      <span class="ms-2">Loading notifications...</span>
    </div>
  </div>
  <div class="dropdown-divider"></div>
  
</div>
  </div>
</li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="pt-5 mt-4">
    <div class="container py-4">
      <!-- Your page content here -->
    </div>
  </main>

    
 <script>
// Enhanced Notification system - Fixed with proper event handling
class NotificationSystem {
  constructor() {
    this.checkInterval = null;
    this.currentNotificationIndex = 0;
    this.allNotifications = [];
    this.isDropdownOpen = false;
    this.init();
  }

  init() {
    this.loadNotifications();
    this.setupEventListeners();
    
    this.checkInterval = setInterval(() => {
      this.loadNotifications();
    }, 30000);
  }

  async loadNotifications() {
    try {
      const [notifications, upcomingTasks] = await Promise.all([
        this.fetchNotifications(),
        this.fetchUpcomingTasks()
      ]);
      
      this.updateNotificationBadge(notifications, upcomingTasks);
      this.allNotifications = [...upcomingTasks, ...notifications];
      
      // Only re-render if dropdown is open
      if (this.isDropdownOpen) {
        this.renderSingleNotification();
      }
    } catch (error) {
      console.error('Error loading notifications:', error);
    }
  }

  async fetchNotifications() {
    try {
      const response = await fetch('/notifications?limit=10');
      return await response.json();
    } catch (error) {
      console.error('Error fetching notifications:', error);
      return [];
    }
  }

  async fetchUpcomingTasks() {
    try {
      const response = await fetch('/tasks/upcoming?days=3');
      if (response.ok) {
        return await response.json();
      }
      return [];
    } catch (error) {
      console.error('Error fetching upcoming tasks:', error);
      return [];
    }
  }

  updateNotificationBadge(notifications, upcomingTasks) {
    const badge = document.getElementById('notificationBadge');
    const unreadNotifications = notifications.filter(n => !n.is_read).length;
    const upcomingTasksCount = upcomingTasks.length;
    const totalCount = unreadNotifications + upcomingTasksCount;
    
    if (totalCount > 0) {
      badge.textContent = totalCount;
      badge.style.display = 'block';
    } else {
      badge.style.display = 'none';
    }
  }

  renderSingleNotification() {
    const container = document.getElementById('notificationsList');
    
    if (!container) return;
    
    if (this.allNotifications.length === 0) {
      container.innerHTML = `
        <div class="px-3 py-3 text-center text-muted">
          <i class="bi bi-bell-slash" style="font-size: 1.5rem;"></i>
          <div class="mt-2">No notifications</div>
        </div>
      `;
      return;
    }

    const currentNotification = this.allNotifications[this.currentNotificationIndex];
    const isUpcomingTask = currentNotification.due_date !== undefined;
    
    let html = '';
    
    // Navigation header
    html += `
      <div class="notification-header d-flex justify-content-between align-items-center px-3 py-2 border-bottom border-dark">
        <small class="text-muted">
          ${this.currentNotificationIndex + 1} of ${this.allNotifications.length}
        </small>
        <div class="d-flex gap-1">
          <button class="btn btn-sm btn-outline-secondary prev-notification-btn" 
                  ${this.currentNotificationIndex === 0 ? 'disabled' : ''}>
            <i class="bi bi-chevron-left"></i>
          </button>
          <button class="btn btn-sm btn-outline-secondary next-notification-btn" 
                  ${this.currentNotificationIndex === this.allNotifications.length - 1 ? 'disabled' : ''}>
            <i class="bi bi-chevron-right"></i>
          </button>
        </div>
      </div>
    `;

    // Current notification
    if (isUpcomingTask) {
      const dueDate = new Date(currentNotification.due_date);
      const now = new Date();
      const daysUntilDue = Math.ceil((dueDate - now) / (1000 * 60 * 60 * 24));
      
      let urgencyClass = '';
      let urgencyIcon = '';
      
      if (daysUntilDue <= 0) {
        urgencyClass = 'text-danger';
        urgencyIcon = 'bi-exclamation-triangle-fill';
      } else if (daysUntilDue === 1) {
        urgencyClass = 'text-warning';
        urgencyIcon = 'bi-exclamation-circle';
      } else {
        urgencyClass = 'text-info';
        urgencyIcon = 'bi-calendar-event';
      }
      
      html += `
        <div class="notification-item p-3">
          <div class="d-flex align-items-start mb-2">
            <i class="bi ${urgencyIcon} ${urgencyClass} me-2 fs-5"></i>
            <div class="flex-grow-1">
              <h6 class="mb-1 fw-bold">${currentNotification.title}</h6>
              <div class="d-flex align-items-center gap-2 mb-2">
                <span class="badge ${this.getPriorityBadgeClass(currentNotification.priority)}">
                  ${currentNotification.priority}
                </span>
                <small class="text-muted">${currentNotification.task_type}</small>
              </div>
            </div>
          </div>
          
          <div class="notification-content">
            <p class="mb-2">
              <strong>For:</strong> ${currentNotification.pet_name}<br>
              <strong>Due:</strong> ${dueDate.toLocaleDateString()} 
              <span class="${urgencyClass} fw-bold">
                (${daysUntilDue <= 0 ? 'TODAY' : `${daysUntilDue} day${daysUntilDue !== 1 ? 's' : ''} left`})
              </span>
            </p>
            ${currentNotification.description ? `
              <div class="bg-dark rounded p-2 mb-2">
                <small class="text-muted">${currentNotification.description}</small>
              </div>
            ` : ''}
          </div>
        </div>
      `;
    } else {
      html += `
        <div class="notification-item p-3">
          <div class="d-flex align-items-start mb-2">
            <i class="bi bi-bell${currentNotification.is_read ? '' : '-fill'} text-primary me-2 fs-5"></i>
            <div class="flex-grow-1">
              <h6 class="mb-1 ${currentNotification.is_read ? '' : 'fw-bold'}">${currentNotification.title}</h6>
              <small class="text-muted">${new Date(currentNotification.created_at).toLocaleString()}</small>
            </div>
            ${!currentNotification.is_read ? `
              <button class="btn btn-sm btn-outline-primary mark-read-btn" 
                      data-id="${currentNotification.notification_id}" 
                      title="Mark as read">
                <i class="bi bi-check"></i>
              </button>
            ` : ''}
          </div>
          
          <div class="notification-content">
            <p class="mb-0">${currentNotification.message}</p>
          </div>
        </div>
      `;
    }

    container.innerHTML = html;
    this.attachEventListeners();
  }

  attachEventListeners() {
    // Previous button
    const prevBtn = document.querySelector('.prev-notification-btn');
    if (prevBtn) {
      prevBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        if (this.currentNotificationIndex > 0) {
          this.currentNotificationIndex--;
          this.renderSingleNotification();
        }
      });
    }

    // Next button
    const nextBtn = document.querySelector('.next-notification-btn');
    if (nextBtn) {
      nextBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        if (this.currentNotificationIndex < this.allNotifications.length - 1) {
          this.currentNotificationIndex++;
          this.renderSingleNotification();
        }
      });
    }

    // Mark as read button
    const markReadBtn = document.querySelector('.mark-read-btn');
    if (markReadBtn) {
      markReadBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.markAsRead(markReadBtn.dataset.id);
      });
    }
  }

  getPriorityBadgeClass(priority) {
    const classes = {
      'high': 'bg-danger',
      'medium': 'bg-warning',
      'low': 'bg-success'
    };
    return classes[priority] || 'bg-secondary';
  }

  async markAsRead(notificationId) {
    try {
      await fetch(`/notifications/${notificationId}/read`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' }
      });
      this.loadNotifications();
    } catch (error) {
      console.error('Error marking notification as read:', error);
    }
  }

  async markAllAsRead() {
    try {
      await fetch('/notifications/read-all', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' }
      });
      this.loadNotifications();
    } catch (error) {
      console.error('Error marking all notifications as read:', error);
    }
  }

  setupEventListeners() {
    // Mark all read button
    const markAllReadBtn = document.getElementById('markAllReadBtn');
    if (markAllReadBtn) {
      markAllReadBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.markAllAsRead();
      });
    }

    // Dropdown open/close events
    const dropdownElement = document.getElementById('notificationDropdown');
    if (dropdownElement) {
      dropdownElement.addEventListener('show.bs.dropdown', () => {
        this.isDropdownOpen = true;
        this.currentNotificationIndex = 0;
        this.renderSingleNotification();
      });

      dropdownElement.addEventListener('hide.bs.dropdown', () => {
        this.isDropdownOpen = false;
      });
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      const dropdown = document.getElementById('notificationDropdown');
      const dropdownMenu = document.querySelector('.dropdown-menu');
      
      if (dropdown && !dropdown.contains(e.target) && dropdownMenu && dropdownMenu.classList.contains('show')) {
        const bsDropdown = bootstrap.Dropdown.getInstance(dropdown);
        if (bsDropdown) {
          bsDropdown.hide();
        }
      }
    });
  }

  destroy() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
    }
  }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  // Theme toggle functionality
  const themeToggle = document.getElementById('themeToggle');
  if (themeToggle) {
    themeToggle.addEventListener('click', function() {
      const lightIcon = document.getElementById('lightIcon');
      const darkIcon = document.getElementById('darkIcon');
      const html = document.documentElement;
      
      const currentTheme = html.getAttribute('data-theme') || 'light';
      
      if (currentTheme === 'light') {
        lightIcon.classList.remove('d-none');
        darkIcon.classList.add('d-none');
        html.setAttribute('data-theme', 'dark');
        localStorage.setItem('theme', 'dark');
      } else {
        lightIcon.classList.add('d-none');
        darkIcon.classList.remove('d-none');
        html.setAttribute('data-theme', 'light');
        localStorage.setItem('theme', 'light');
      }
    });
  }

  // Load saved theme
  const savedTheme = localStorage.getItem('theme') || 'light';
  const lightIcon = document.getElementById('lightIcon');
  const darkIcon = document.getElementById('darkIcon');
  const html = document.documentElement;

  html.setAttribute('data-theme', savedTheme);
  
  if (savedTheme === 'dark') {
    if (lightIcon) lightIcon.classList.remove('d-none');
    if (darkIcon) darkIcon.classList.add('d-none');
  } else {
    if (lightIcon) lightIcon.classList.add('d-none');
    if (darkIcon) darkIcon.classList.remove('d-none');
  }

  // Initialize notification system
  window.notificationSystem = new NotificationSystem();
});
</script>
  



</body>
</html>